Username: admin
Password: admin

Email: testproject6767@gmail.com
Password: forprojectpurposesonly67

SMTP Email: testproject6767@gmail.com
SMTP Password: jexwzyjkymvxwxze

CREATE TABLE user_role (
    user_role_id int(11) PRIMARY KEY AUTO_INCREMENT NOT NULL,
    role varchar(255) NOT NULL,
    is_deleted tinyint NOT NULL DEFAULT 0,
    date_added timestamp DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE user (
	user_id int(11) PRIMARY KEY AUTO_INCREMENT NOT NULL,
    user_role_id int(11) DEFAULT 2,
    username varchar(255) UNIQUE NOT NULL,
    password varchar(255) NOT NULL,
    verification_key varchar(255) NOT NULL,
    is_verified tinyint NOT NULL DEFAULT 0,
    is_deleted tinyint NOT NULL DEFAULT 0,
    last_login timestamp DEFAULT 0,
    date_added timestamp DEFAULT CURRENT_TIMESTAMP,
	last_updated timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY(user_role_id) REFERENCES user_role(user_role_id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE user_info (
	user_info_id int(11) PRIMARY KEY AUTO_INCREMENT NOT NULL,
    user_id int(11) UNIQUE,
    email varchar(255) UNIQUE NOT NULL,
    phone_number varchar(255) NOT NULL DEFAULT '',
    first_name varchar(255) NOT NULL,
    last_name varchar(255) NOT NULL,
    image varchar(255) NOT NULL DEFAULT 'profile-pictures/default.png',
    is_deleted tinyint NOT NULL DEFAULT 0,
    date_added timestamp DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY(user_id) REFERENCES user(user_id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE password_reset (
	password_reset_id int(11) PRIMARY KEY AUTO_INCREMENT NOT NULL,
    password_reset_email text NOT NULL,
    password_reset_selector text NOT NULL,
    password_reset_token longtext NOT NULL,
    password_reset_expires text NOT NULL
);

CREATE TABLE category (
    category_id int(11) PRIMARY KEY AUTO_INCREMENT NOT NULL,
    category varchar(255) NOT NULL,
    is_deleted tinyint NOT NULL DEFAULT 0,
    date_added timestamp DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE service (
    service_id int(11) PRIMARY KEY AUTO_INCREMENT NOT NULL,
    category_id int(11),
    service varchar(255) NOT NULL,
    description varchar(255) NOT NULL,
    price double(7, 2) NOT NULL,
    is_deleted tinyint NOT NULL DEFAULT 0,
    date_added timestamp DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY(category_id) REFERENCES category(category_id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE timeslot (
    timeslot_id int(11) PRIMARY KEY AUTO_INCREMENT NOT NULL,
    service_id int(11),
    timeslot varchar(255) NOT NULL,
    is_deleted tinyint NOT NULL DEFAULT 0,
    date_added timestamp DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY(service_id) REFERENCES service(service_id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE appointment (
	appointment_id int(11) PRIMARY KEY AUTO_INCREMENT NOT NULL,
    user_id int(11),
    pet_name varchar(255) NOT NULL,
    category_id int(11),
    birthdate date NOT NULL,
    gender varchar(255) NOT NULL,
    service_id int(11),
    date date NOT NULL,
    timeslot varchar(255) NOT NULL,
    status tinyint NOT NULL DEFAULT 0,
    is_deleted tinyint NOT NULL DEFAULT 0,
    date_added timestamp DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY(user_id) REFERENCES user(user_id) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY(category_id) REFERENCES category(category_id) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY(service_id) REFERENCES service(service_id) ON DELETE SET NULL ON UPDATE CASCADE
);

SELECT user_role.user_role_id, user_role.role, user.user_id, user.user_role_id, user.username, user.is_verified, user.last_login, user.date_added AS user_date_added, user.last_updated AS user_last_updated, user_info.user_info_id, user_info.user_id, user_info.email, user_info.phone_number, user_info.first_name, user_info.last_name, user_info.date_added AS user_info_date_added, user_info.last_updated AS user_info_last_updated FROM user_info INNER JOIN user USING (user_id) INNER JOIN user_role USING (user_role_id) WHERE user.is_deleted != 1 ORDER BY user.user_id DESC;

SELECT category.category_id, category.category, appointment.appointment_id, appointment.user_id, appointment.pet_name, appointment.category_id, appointment.birthdate, appointment.gender, appointment.service_id, appointment.date, appointment.timeslot, appointment.status, appointment.date_added, appointment.last_updated, service.service_id, service.service FROM category INNER JOIN appointment USING (category_id) INNER JOIN service USING (service_id) WHERE appointment.is_deleted != 1 ORDER BY appointment.appointment_id ASC;

SELECT user_info.user_id, user_info.email, user_info.phone_number, user_info.first_name, user_info.last_name, category.category_id, category.category, appointment.appointment_id, appointment.pet_name, appointment.category_id, appointment.birthdate, appointment.gender, appointment.service_id, appointment.date, appointment.timeslot, appointment.status, appointment.date_added, appointment.last_updated, service.service_id, service.service FROM category INNER JOIN appointment USING (category_id) INNER JOIN service USING (service_id) INNER JOIN user_info USING (user_id) WHERE appointment.is_deleted != 1 ORDER BY appointment.appointment_id DESC



